<?xml version="1.0"?>
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:set="http://www.sitecore.net/xmlconfig/set/" xmlns:role="http://www.sitecore.net/xmlconfig/role/">
    <sitecore>
        <services>
           <configurator type="Mvp.Foundation.People.ServicesConfigurator, Mvp.Foundation.People" />
        </services>
      <api>
        <GraphQL>
          <endpoints>
            <jssGraphQLEndpoint url="/api/content/people" type="Sitecore.Services.GraphQL.Hosting.GraphQLEndpoint, Sitecore.Services.GraphQL.NetFxHost" resolve="true">
              <url>$(url)</url>

              <enabled>true</enabled>

              <enableSubscriptions>true</enableSubscriptions>


              <!-- lock down the endpoint when deployed to content delivery -->
              <graphiql role:require="ContentDelivery">false</graphiql>
              <enableSchemaExport role:require="ContentDelivery">false</enableSchemaExport>
              <enableStats role:require="ContentDelivery">false</enableStats>
              <enableCacheStats role:require="ContentDelivery">false</enableCacheStats>
              <disableIntrospection role:require="ContentDelivery">true</disableIntrospection>

              <schema hint="list:AddSchemaProvider">
                <content type="Sitecore.Services.GraphQL.Content.ContentSchemaProvider, Sitecore.Services.GraphQL.Content">
                  <templates type="Sitecore.Services.GraphQL.Content.TemplateGeneration.Filters.StandardTemplatePredicate, Sitecore.Services.GraphQL.Content">
                    <database>context</database>
                    <paths hint="list:AddIncludedPath">
                      <templates>/sitecore/templates</templates>
                    </paths>
                    <fieldFilter type="Sitecore.Services.GraphQL.Content.TemplateGeneration.Filters.StandardFieldFilter, Sitecore.Services.GraphQL.Content">
                      <exclusions hint="raw:AddFilter">
                        <!-- Remove system fields from the API (e.g. __Layout) to keep the schema lean -->
                        <exclude name="__*" />
                      </exclusions>
                    </fieldFilter>
                  </templates>

                  <queries hint="raw:AddQuery">
                    <!-- enable querying on items via this API -->
                    <query name="item" type="Sitecore.Services.GraphQL.Content.Queries.ItemQuery, Sitecore.Services.GraphQL.Content" />
                    <!--<query name="search" type="Sitecore.Services.GraphQL.Content.Queries.SearchQuery, Sitecore.Services.GraphQL.Content" />-->
                    <query name="search" type="Mvp.Foundation.People.GrapghQl.SearchQueryWithSort, Mvp.Foundation.People" />
                  </queries>

                  <fieldTypeMapping ref="/sitecore/api/GraphQL/defaults/content/fieldTypeMappings/standardTypeMapping" />
                </content>
              </schema>


              <!-- Extenders allow modifying schema types after they are created by a schema provider but before they are added to the final schema. This is useful when you want to _extend_ a generated schema, for example to add external API data onto the item API, or to add in custom internal data (e.g. custom layout data to power an app) without having to directly modify a schema provider. Extenders must derive from SchemaExtender. -->

              <!-- Enables the 'jss' graph nodes that are preformatted to use with JSS rendering components, and the datasource resolving queries for JSS -->
              <extenders hint="list:AddExtender">
                <layoutExtender type="Sitecore.JavaScriptServices.GraphQL.JssExtender, Sitecore.JavaScriptServices.GraphQL" resolve="true" />
                <CustomSchemaExtender type="Mvp.Foundation.People.Extensions.CustomSchemaExtender, Mvp.Foundation.People" />
              </extenders>

              <!-- Determines the security of the service. Defaults are defined in Sitecore.Services.GraphQL.config -->
              <security ref="/sitecore/api/GraphQL/defaults/security/publicService" />

              <!-- Determines how performance is logged for the service. Defaults are defined in Sitecore.Services.GraphQL.config -->
              <performance ref="/sitecore/api/GraphQL/defaults/performance/standard" />

              <!-- Cache improves the query performance by caching parsed queries. It is also possible to implement query whitelisting by implementing an authoritative query cache; WhitelistingGraphQLQueryCache is an example of this, capturing queries to files in open mode and allowing only captured queries in whitelist mode. -->
              <cache type="Sitecore.Services.GraphQL.Hosting.QueryTransformation.Caching.GraphQLQueryCache, Sitecore.Services.GraphQL.NetFxHost">
                <param desc="name">$(url)</param>
                <param desc="maxSize">10MB</param>
              </cache>

            </jssGraphQLEndpoint >
          </endpoints>
        </GraphQL>
      </api>

      <contentSearch>
        <indexConfigurations>
          <defaultSolrIndexConfiguration>
            <documentOptions ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration/documentOptions">
              <fields hint="raw:AddComputedIndexField">
                <field fieldName="personaward" returnType="stringCollection"> Mvp.Foundation.People.ComputedFields.PersonAward, Mvp.Foundation.People</field>
                <field fieldName="personyear" returnType="stringCollection"> Mvp.Foundation.People.ComputedFields.PersonYear, Mvp.Foundation.People</field>
                <field fieldName="personyearaward" returnType="stringCollection"> Mvp.Foundation.People.ComputedFields.PersonYearAward, Mvp.Foundation.People</field>                
                <field fieldName="personcountry" returnType="string"> Mvp.Foundation.People.ComputedFields.PersonCountry, Mvp.Foundation.People</field>
                <field fieldName="ismvp" returnType="string"> Mvp.Foundation.People.ComputedFields.PersonIsMvp, Mvp.Foundation.People</field>
                <field fieldName="personfullname" returnType="string"> Mvp.Foundation.People.ComputedFields.PersonFullName, Mvp.Foundation.People</field>
                <field fieldName="_content" returnType="string"> Mvp.Foundation.People.ComputedFields.PersonContent, Mvp.Foundation.People</field>
              </fields>
            </documentOptions>
          </defaultSolrIndexConfiguration>
        </indexConfigurations>
      </contentSearch>
    </sitecore>
</configuration>