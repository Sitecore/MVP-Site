# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - master

resources:
- repo: self
  clean: true

variables:
  # Agent VM image name
  vmImageName: 'windows-latest'

stages:

- stage: Build
  displayName: Build Images + Push to ACR
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DockerCompose@0
      displayName: "Build Images"
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'DevEx MVP ACR'
        dockerComposeFile: '**/docker-compose.yml'
        dockerComposeFileArgs: '$(DOCKER_COMPOSE_ARGS)'
        qualifyImageNames: false
        action: 'Build services'
        additionalImageTags: '$(Build.BuildNumber)-$(Build.SourceBranchName)'
        includeLatestTag: true
    - task: DockerCompose@0
      displayName: "Push Images with Latest Tag"
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        azureContainerRegistry: '$(AZURE_CONTAINER_REGISTRY)'
        dockerComposeFile: '**/docker-compose.yml'
        dockerComposeFileArgs: '$(DOCKER_COMPOSE_ARGS)'
        action: 'Push services'
        additionalImageTags: '$(Build.BuildNumber)-$(Build.SourceBranchName)'
        includeLatestTag: true
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: DockerCompose@0
      displayName: "Push Images without Latest Tag"
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        azureContainerRegistry: '$(AZURE_CONTAINER_REGISTRY)'
        dockerComposeFile: '**/docker-compose.yml'
        dockerComposeFileArgs: '$(DOCKER_COMPOSE_ARGS)'
        action: 'Push services'
        additionalImageTags: '$(Build.BuildNumber)-$(Build.SourceBranchName)'
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: CopyFiles@2
      displayName: "Copy K8s specifications to staging directory"
      inputs:
        SourceFolder: 'k8s/specs'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/k8s-specs'
        CleanTargetFolder: true
    - task: CopyFiles@2
      displayName: "Copy Sitecore CLI definition to staging directory"
      inputs:
        SourceFolder: '.config'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/sitecore-cli'
        CleanTargetFolder: true
    - task: CopyFiles@2
      displayName: "Copy Serialisation assets to staging directory"
      inputs:
        SourceFolder: './'
        Contents: |
          sitecore.json
          src/**/*.module.json
          src/**/items/**
        TargetFolder: '$(Build.ArtifactStagingDirectory)/serialization'
        CleanTargetFolder: true
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.ArtifactsDirectory)'
        artifact: 'Sitecore.MVP-$(Build.BuildNumber)'

- stage: Deploy
  condition:  $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  dependsOn: Build
  displayName: Deploy to Staging
  jobs:
  - deployment: 'Deploy_Specs_to_Staging_AKS'
    pool:
      vmImage: $(vmImageName)
    environment: Staging
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download Build Artifact"
            inputs:
              artifact: Sitecore.MVP-$(Build.BuildNumber)
              targetPath: '$(System.ArtifactsDirectory)'
          - task: Kubernetes@1
            displayName: Create MVP-Staging Namespace
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'Staging-MVP-Site-v2-mvp-staging-1594770370465'
              command: 'apply'
              useConfigurationFile: true
              configuration: '$(System.ArtifactsDirectory)/k8s-specs/namespaces/namespace-staging.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
          - task: Kubernetes@1
            displayName: Deploy External Specifications
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'Staging-MVP-Site-v2-mvp-staging-1594770370465'
              namespace: 'mvp-staging'
              command: 'apply'
              useConfigurationFile: true
              configuration: '$(System.ArtifactsDirectory)/k8s-specs/external'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
          - task: Kubernetes@1
            displayName: Deploy Init Specifications
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'Staging-MVP-Site-v2-mvp-staging-1594770370465'
              namespace: 'mvp-staging'
              command: 'apply'
              useConfigurationFile: true
              configuration: '$(System.ArtifactsDirectory)/k8s-specs/init'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
          - task: Kubernetes@1
            displayName: Deploy Application Specifications
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'Staging-MVP-Site-v2-mvp-staging-1594770370465'
              namespace: 'mvp-staging'
              command: 'apply'
              useConfigurationFile: true
              configuration: '$(System.ArtifactsDirectory)/k8s-specs'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
          - task: KubernetesManifest@0
            displayName: Patch IP-Whitelist Values into Ingress
            inputs:
              action: 'patch'
              kubernetesServiceConnection: 'Staging-MVP-Site-v2-mvp-staging-1594770370465'
              namespace: 'mvp-staging'
              resourceToPatch: 'file'
              resourceFileToPatch: '$(System.ArtifactsDirectory)/k8s-specs/ingress.yaml'
              mergeStrategy: 'merge'
              patch: '{"metadata": { "annotations": { "nginx.ingress.kubernetes.io/whitelist-source-range": "$(IP_WHITELIST)" }}}'
          - task: Kubernetes@1
            displayName: Update ID Image version
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'Staging-MVP-Site-v2-mvp-staging-1594770370465'
              namespace: 'mvp-staging'
              command: 'set'
              arguments: 'image deployments/id sitecore-xm1-id=mvpsitev2.azurecr.io/mvp-id:$(Build.BuildNumber)-$(Build.SourceBranchName)'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
          - task: Kubernetes@1
            displayName: Update CM Image version
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'Staging-MVP-Site-v2-mvp-staging-1594770370465'
              namespace: 'mvp-staging'
              command: 'set'
              arguments: 'image deployments/cm sitecore-xm1-cm=mvpsitev2.azurecr.io/mvp-cm:$(Build.BuildNumber)-$(Build.SourceBranchName)'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
          - task: Kubernetes@1
            displayName: Update CD Image version
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'Staging-MVP-Site-v2-mvp-staging-1594770370465'
              namespace: 'mvp-staging'
              command: 'set'
              arguments: 'image deployments/cd sitecore-xm1-cd=mvpsitev2.azurecr.io/mvp-cd:$(Build.BuildNumber)-$(Build.SourceBranchName)'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
          - task: Kubernetes@1
            displayName: Update CD Image version
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'Staging-MVP-Site-v2-mvp-staging-1594770370465'
              namespace: 'mvp-staging'
              command: 'set'
              arguments: 'image deployments/rendering sitecore-xm1-rendering=mvpsitev2.azurecr.io/mvp-rendering:$(Build.BuildNumber)-$(Build.SourceBranchName)'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
  - deployment: 'Deserialize_Content_to_Staging'
    dependsOn: 'Deploy_Specs_to_Staging_AKS'
    pool:
      vmImage: $(vmImageName)
    environment: Staging
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download Build Artifact"
            inputs:
              artifact: Sitecore.MVP-$(Build.BuildNumber)
              targetPath: '$(System.ArtifactsDirectory)'
          - task: PowerShell@2
            displayName: Register Build Agent with Private Nuget Feed
            inputs:
              targetType: 'inline'
              script: |
                #Setup Credential Provider
                Invoke-WebRequest 'https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/helpers/installcredprovider.ps1' -OutFile installcredprovider.ps1
                .\installcredprovider.ps1 -Force 
                Remove-Item .\installcredprovider.ps1;
                $env:VSS_NUGET_EXTERNAL_FEED_ENDPOINTS='{ "endpointCredentials": [{"endpoint": "$(NUGET_PREVIEW_SOURCE)", "username":"NA", "password":"$(AZURE_PAT)"}]}'
                Write-Host $env:VSS_NUGET_EXTERNAL_FEED_ENDPOINTS
                
                # Add nuget source & install Sitecore CLI
                dotnet nuget add source $(NUGET_PREVIEW_SOURCE) --name "MVP-Preview@Release"
                dotnet tool install -g --add-source=$(NUGET_PREVIEW_SOURCE) --version 2.0.0-r00177 sitecore.cli
          - task: PowerShell@2
            displayName: Login to Sitecore Instance
            inputs:
              targetType: 'inline'
              script: 'sitecore login --client-credentials true -a https://mvp-id.sitecoredemo.com -h https://mvp-cm.sitecoredemo.com --allow-write true --client-id "MVP_Automation" --client-secret "$(SITECORE_CLIENT_SECRET)"'
              workingDirectory: '$(System.ArtifactsDirectory)/serialization'
          - task: PowerShell@2
            displayName: Deserialize Sitecore Content
            inputs:
              targetType: 'inline'
              script: 'sitecore ser push'
              workingDirectory: '$(System.ArtifactsDirectory)/serialization'
          - task: PowerShell@2
            displayName: Perform Full Sitecore Publish
            inputs:
              targetType: 'inline'
              script: 'sitecore publish'
              workingDirectory: '$(System.ArtifactsDirectory)/serialization'